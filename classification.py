# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'classification.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


#from PyQt5 import QtCore, QtGui, QtWidgets
import cv2 as cv #open cv
import numpy as np
#import matplotlib.pyplot as plt #untuk membuat grafik
#import pandas as pd #dataframe
from skimage.feature import greycomatrix, greycoprops
#import seaborn as sns 
#import os.path
#from PyQt5 import QtCore
#from PyQt5.QtGui import QImage,QPixmap,QIcon
#from PyQt5 import QtCore, QtGui, uic
#from PyQt5.QtWidgets import *
#from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QLabel, QPushButton, QTextEdit, QDialog
#from sklearn.model_selection import train_test_split
import pickle
#from sklearn.neighbors import KNeighborsClassifier  ##sklearn library untuk knn classifier
#from sklearn.neighbors import KNeighborsClassifier
from sklearn.neighbors import KNeighborsClassifier



class Ui_Classification(object):
    def setupUi(self, Classification):
        Classification.setObjectName("Classification")
        Classification.resize(922, 670)
        Classification.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(Classification)
        self.centralwidget.setObjectName("centralwidget")
        #Label RGB
        self.groupBoxRGB = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxRGB.setGeometry(QtCore.QRect(50, 90, 301, 191))
        #font = QtGui.QFont()
        #font.setPointSize(12)
        #self.groupBoxRGB.setFont(font)
        self.groupBoxRGB.setObjectName("groupBoxRGB")
        self.labelRGB = QtWidgets.QLabel(self.groupBoxRGB)
        self.labelRGB.setGeometry(QtCore.QRect(20, 30, 261, 141))
        self.labelRGB.setFrameShape(QtWidgets.QFrame.Box)
        self.labelRGB.setFrameShadow(QtWidgets.QFrame.Plain)
        self.labelRGB.setText("")
        self.labelRGB.setScaledContents(True)
        self.labelRGB.setObjectName("labelRGB")
        
        #Label GRAYSCALE
        self.groupBoxGrayscale = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxGrayscale.setGeometry(QtCore.QRect(380, 90, 301, 191))
        """font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBoxGrayscale.setFont(font)"""
        self.groupBoxGrayscale.setObjectName("groupBoxGrayscale")
        self.labelGrayscale = QtWidgets.QLabel(self.groupBoxGrayscale)
        self.labelGrayscale.setGeometry(QtCore.QRect(20, 30, 261, 141))
        self.labelGrayscale.setFrameShape(QtWidgets.QFrame.Box)
        self.labelGrayscale.setFrameShadow(QtWidgets.QFrame.Plain)
        self.labelGrayscale.setText("")
        self.labelGrayscale.setScaledContents(True)
        self.labelGrayscale.setObjectName("labelGrayscale")
        
        #TABLE GLCM
        self.tableWidgetGLCM = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidgetGLCM.setGeometry(QtCore.QRect(50, 300, 631, 171))
        self.tableWidgetGLCM.setObjectName("tableWidgetGLCM")
        self.tableWidgetGLCM.setColumnCount(6)
        self.tableWidgetGLCM.setRowCount(4)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetGLCM.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetGLCM.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetGLCM.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetGLCM.setVerticalHeaderItem(3, item)
        
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetGLCM.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetGLCM.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetGLCM.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetGLCM.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetGLCM.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetGLCM.setHorizontalHeaderItem(5, item)
        
        #GROUPBOX RGB / INPUT CITRA
        self.InputCitra = QtWidgets.QGroupBox(self.centralwidget)
        self.InputCitra.setGeometry(QtCore.QRect(710, 90, 181, 101))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.InputCitra.setFont(font)
        self.InputCitra.setObjectName("InputCitra")
        self.ButoonOpen = QtWidgets.QPushButton(self.InputCitra)
        self.ButoonOpen.setGeometry(QtCore.QRect(20, 20, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.ButoonOpen.setFont(font)
        self.ButoonOpen.setObjectName("ButoonOpen")
        
        self.ButtonReset = QtWidgets.QPushButton(self.InputCitra)
        self.ButtonReset.setGeometry(QtCore.QRect(20, 60, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.ButtonReset.setFont(font)
        self.ButtonReset.setObjectName("ButtonReset")
        
        #GLCM DAN KNN
        self.Classification = QtWidgets.QGroupBox(self.centralwidget)
        self.Classification.setGeometry(QtCore.QRect(710, 300, 181, 101))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Classification.setFont(font)
        self.Classification.setObjectName("Classification")
        self.ButtonGLCM = QtWidgets.QPushButton(self.Classification)
        self.ButtonGLCM.setGeometry(QtCore.QRect(20, 20, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.ButtonGLCM.setFont(font)
        self.ButtonGLCM.setObjectName("ButtonGLCM")
        
        self.ButtonClassification = QtWidgets.QPushButton(self.Classification)
        self.ButtonClassification.setGeometry(QtCore.QRect(20, 60, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.ButtonClassification.setFont(font)
        self.ButtonClassification.setObjectName("ButtonClassification")
        
        self.groupBoxHasil = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxHasil.setGeometry(QtCore.QRect(50, 490, 301, 101))
        #font = QtGui.QFont()
        #font.setPointSize(12)
        #self.groupBoxHasil.setFont(font)
        self.groupBoxHasil.setObjectName("groupBoxHasil")
        self.lineHasil = QtWidgets.QLineEdit(self.groupBoxHasil)
        self.lineHasil.setGeometry(QtCore.QRect(30, 30, 251, 51))
        self.lineHasil.setObjectName("lineHasil")
        
        #GROUPBOX PREPROCESSING
        self.Preprocessing = QtWidgets.QGroupBox(self.centralwidget)
        self.Preprocessing.setGeometry(QtCore.QRect(710, 210, 181, 71))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Preprocessing.setFont(font)
        self.Preprocessing.setObjectName("Preprocessing")
        self.ButtonGrayscale = QtWidgets.QPushButton(self.Preprocessing)
        self.ButtonGrayscale.setGeometry(QtCore.QRect(20, 20, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.ButtonGrayscale.setFont(font)
        self.ButtonGrayscale.setObjectName("ButtonGrayscale")
        
        #LABEL JUDUL
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(150, 10, 581, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(150, 40, 581, 31))
        self.label_2.setObjectName("label_2")
        Classification.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Classification)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 922, 21))
        self.menubar.setObjectName("menubar")
        Classification.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Classification)
        self.statusbar.setObjectName("statusbar")
        Classification.setStatusBar(self.statusbar)

        self.retranslateUi(Classification)
        QtCore.QMetaObject.connectSlotsByName(Classification)

    def retranslateUi(self, Classification):
        _translate = QtCore.QCoreApplication.translate
        Classification.setWindowTitle(_translate("Classification", "MainWindow"))
        self.groupBoxRGB.setTitle(_translate("Classification", "RGB"))
        self.groupBoxGrayscale.setTitle(_translate("Classification", "Citra Grayscale"))
        item = self.tableWidgetGLCM.verticalHeaderItem(0)
        item.setText(_translate("Classification", "0"))
        item = self.tableWidgetGLCM.verticalHeaderItem(1)
        item.setText(_translate("Classification", "45"))
        item = self.tableWidgetGLCM.verticalHeaderItem(2)
        item.setText(_translate("Classification", "90"))
        item = self.tableWidgetGLCM.verticalHeaderItem(3)
        item.setText(_translate("Classification", "135"))
        item = self.tableWidgetGLCM.horizontalHeaderItem(0)
        item.setText(_translate("Classification", "Contrast"))
        item = self.tableWidgetGLCM.horizontalHeaderItem(1)
        item.setText(_translate("Classification", "Dissimilarity"))
        item = self.tableWidgetGLCM.horizontalHeaderItem(2)
        item.setText(_translate("Classification", "Homogeneity"))
        item = self.tableWidgetGLCM.horizontalHeaderItem(3)
        item.setText(_translate("Classification", "ASM"))
        item = self.tableWidgetGLCM.horizontalHeaderItem(4)
        item.setText(_translate("Classification", "Energy"))
        item = self.tableWidgetGLCM.horizontalHeaderItem(5)
        item.setText(_translate("Classification", "Correlation"))
        
        self.InputCitra.setTitle(_translate("Classification", "Input Citra"))
        self.ButoonOpen.setText(_translate("Classification", "Open"))
        self.ButtonReset.setText(_translate("Classification", "Reset"))
        self.Classification.setTitle(_translate("Classification", "Feature And Classification"))
        self.ButtonGLCM.setText(_translate("Classification", "GLCM"))
        self.ButtonClassification.setText(_translate("Classification", "Classification"))
        self.groupBoxHasil.setTitle(_translate("Classification", "Jenis Mangga "))
        self.Preprocessing.setTitle(_translate("Classification", "Preprocessing "))
        self.ButtonGrayscale.setText(_translate("Classification", "Grayscale"))
        self.label.setText(_translate("Classification", "<html><head/><body><p align=\"center\"><span style=\" font-size:9pt; font-weight:600;\">KLASIFIKASI JENIS TANAMAN MANGGA BERDASARKAN BENTUK DAUN DENGAN MENGGUNAKAN </span></p></body></html>"))
        self.label_2.setText(_translate("Classification", "<html><head/><body><p align=\"center\"><span style=\" font-size:9pt; font-weight:600;\">GRAY LEVEL CO-OCCURANCE MATRIX DAN K- NEAREST NEIGHBOR</span></p></body></html>"))
        
        self.ButtonGrayscale.setEnabled(False)
        self.ButtonGLCM.setEnabled(False)
        self.ButtonClassification.setEnabled(False)
        
        #self.ButtonReset.clicked.connect(self.ResetImages)
        self.ButoonOpen.clicked.connect(self.OpenImages)
        self.ButtonGrayscale.clicked.connect(self.konversigrayscale)
        self.ButtonGLCM.clicked.connect(self.prosesglcm)
        self.ButtonClassification.clicked.connect(self.prosesknn)
        
    """def ResetImages(self):
        self.labelRGB(self.clear)
        self.labelGrayscale(self.clear)
        self.tableWidgetGLCM(self.clear)"""
    
    def OpenImages(self):
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select Image", "", "Image Files (*.png *.jpg *jpeg *.bmp)")
        if fileName:
            pixmap = QtGui.QPixmap(fileName)
            pixmap = pixmap.scaled(self.labelRGB.width(),self.labelRGB.height())
            self.labelRGB.setPixmap(pixmap)
            self.labelRGB.setAlignment(QtCore.Qt.AlignCenter)
            self.file = fileName
            self.ButtonGrayscale.setEnabled(True)
            
        self.image = cv.imread(self.file, cv.IMREAD_ANYCOLOR)
        self.processedImage = self.image.copy()
        self.previewImage = cv.resize(self.processedImage,(261,141)) #(lebar,tinggi)
        print(self.previewImage.shape)
        self.displayResize()   
    #output resize
    def displayResize(self):
        qFormat = QtGui.QImage.Format_Indexed8
        if len (self.previewImage.shape) == 3:
            if (self.previewImage.shape[2]) == 4:
                qFormat = QtGui.QImage.Format_RGBA8888
            else:
               qFormat = QtGui.QImage.Format_RGB888
        img1 = QtGui.QImage(self.previewImage, self.previewImage.shape[1], self.previewImage.shape[0],self.previewImage.strides[0], qFormat)
        img1 = img1.rgbSwapped()
        
        self.labelRGB.setPixmap(QtGui.QPixmap.fromImage(img1))
        self.labelRGB.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        #self.ButtonGrayscale.setEnabled(True)
    #Grayscale    
    def konversigrayscale(self):
        self.gray = cv.cvtColor(self.previewImage, cv.COLOR_BGR2GRAY)
        self.previewgray= self.gray
        
        self.displayGrayscale()
    def displayGrayscale(self):
        qFormat = QtGui.QImage.Format_Indexed8
        if len (self.previewgray.shape) == 3:
            if (self.previewgray.shape[2]) == 4:
                qFormat = QtGui.QImage.Format_RGBA8888
            else:
                qFormat = QtGui.QImage.Format_RGB888
        self.img1 = QtGui.QImage(self.previewgray, self.previewgray.shape[1], self.previewgray.shape[0], self.previewgray.strides[0], qFormat)
        self.img1 = self.img1.rgbSwapped()
        self.labelGrayscale.setPixmap(QtGui.QPixmap.fromImage(self.img1))
        self.labelGrayscale.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.ButtonGLCM.setEnabled(True)
    
    def prosesglcm(self):
        properties = ['contrast','dissimilarity','homogeneity','ASM','energy','correlation']
        
        self.glcm = greycomatrix(self.gray, distances=[1], angles=[0, np.pi/4, np.pi/2, 3*np.pi/4], levels=256, symmetric=True, normed=True)
        self.feature = []
        glcm_props = [propery for name in properties for propery in greycoprops(self.glcm, name)[0]]
        for item in glcm_props:
            self.feature.append(item)
            
        print(self.feature)
        self.tableWidgetGLCM.setItem(0 , 0, QtWidgets.QTableWidgetItem(str(self.feature[0])))
        self.tableWidgetGLCM.setItem(1 , 0, QtWidgets.QTableWidgetItem(str(self.feature[1])))
        self.tableWidgetGLCM.setItem(2 , 0, QtWidgets.QTableWidgetItem(str(self.feature[2])))
        self.tableWidgetGLCM.setItem(3 , 0, QtWidgets.QTableWidgetItem(str(self.feature[3])))
       
        self.tableWidgetGLCM.setItem(0 , 1, QtWidgets.QTableWidgetItem(str(self.feature[4])))
        self.tableWidgetGLCM.setItem(1 , 1, QtWidgets.QTableWidgetItem(str(self.feature[5])))
        self.tableWidgetGLCM.setItem(2 , 1, QtWidgets.QTableWidgetItem(str(self.feature[6])))
        self.tableWidgetGLCM.setItem(3 , 1, QtWidgets.QTableWidgetItem(str(self.feature[7])))
        
        self.tableWidgetGLCM.setItem(0 , 2, QtWidgets.QTableWidgetItem(str(self.feature[8])))
        self.tableWidgetGLCM.setItem(1 , 2, QtWidgets.QTableWidgetItem(str(self.feature[9])))
        self.tableWidgetGLCM.setItem(2 , 2, QtWidgets.QTableWidgetItem(str(self.feature[10])))
        self.tableWidgetGLCM.setItem(3 , 2, QtWidgets.QTableWidgetItem(str(self.feature[11])))
        
        self.tableWidgetGLCM.setItem(0 , 3, QtWidgets.QTableWidgetItem(str(self.feature[12])))
        self.tableWidgetGLCM.setItem(1 , 3, QtWidgets.QTableWidgetItem(str(self.feature[13])))
        self.tableWidgetGLCM.setItem(2 , 3, QtWidgets.QTableWidgetItem(str(self.feature[14])))
        self.tableWidgetGLCM.setItem(3 , 3, QtWidgets.QTableWidgetItem(str(self.feature[15])))
        
        self.tableWidgetGLCM.setItem(0 , 4, QtWidgets.QTableWidgetItem(str(self.feature[16])))
        self.tableWidgetGLCM.setItem(1 , 4, QtWidgets.QTableWidgetItem(str(self.feature[17])))
        self.tableWidgetGLCM.setItem(2 , 4, QtWidgets.QTableWidgetItem(str(self.feature[18])))
        self.tableWidgetGLCM.setItem(3 , 4, QtWidgets.QTableWidgetItem(str(self.feature[19])))
        
        self.tableWidgetGLCM.setItem(0 , 5, QtWidgets.QTableWidgetItem(str(self.feature[20])))
        self.tableWidgetGLCM.setItem(1 , 5, QtWidgets.QTableWidgetItem(str(self.feature[21])))
        self.tableWidgetGLCM.setItem(2 , 5, QtWidgets.QTableWidgetItem(str(self.feature[22])))
        self.tableWidgetGLCM.setItem(3 , 5, QtWidgets.QTableWidgetItem(str(self.feature[23])))
        self.ButtonClassification.setEnabled(True)
        
    """def prosesknn(self):
        model = pickle.load(open('finalized_modelskrip_new.sav', 'rb'))
        data = [self.feature]
        hasil = model.predict(data)
        if hasil[0] == 0:
            self.lineHasil.setText("Daun kweni")
        else:
            self.lineHasil.setText("Daun lalijowo")"""
        
    def prosesknn(self): 
        model = pickle.load(open('finalized_modelskrip_k9_91.sav', 'rb'))
        data = [self.feature]
        Hasil = model.predict(data)
        if Hasil[0] == 0:
            self.lineHasil.setText("Daun Mangga Kweni")
        if Hasil[0] == 1:
            self.lineHasil.setText("Daun Mangga Lalijowo")
        if Hasil[0] == 2:
            self.lineHasil.setText("Daun Mangga Madu")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Classification = QtWidgets.QMainWindow()
    ui = Ui_Classification()
    ui.setupUi(Classification)
    Classification.show()
    sys.exit(app.exec_())
